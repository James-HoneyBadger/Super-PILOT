REM Educational Programming Concepts Demo
PRINT "ðŸŽ“ Educational Programming Concepts Demo ðŸŽ“"
PRINT "Learn important programming concepts through examples"
PRINT

L:CONCEPTS_MENU
T:=== Programming Concepts ===
T:1. Variables and Data Types
T:2. Control Structures (Loops & Conditionals)
T:3. Functions and Procedures
T:4. Arrays and Data Structures
T:5. Input/Output Operations
T:6. Error Handling
T:7. Exit Demo
T:
A:CONCEPT
Y:*CONCEPT*=1
J:VARIABLES_DEMO
Y:*CONCEPT*=2
J:CONTROL_DEMO
Y:*CONCEPT*=3
J:FUNCTIONS_DEMO
Y:*CONCEPT*=4
J:ARRAYS_DEMO
Y:*CONCEPT*=5
J:IO_DEMO
Y:*CONCEPT*=6
J:ERROR_DEMO
Y:*CONCEPT*=7
J:EXIT_EDU
T:Please choose 1-7.
J:CONCEPTS_MENU

L:VARIABLES_DEMO
T:=== Variables and Data Types ===
T:Variables store information that can change during program execution.
T:
REM Demonstrate different types of variables
LET INTEGER_VAR = 42
LET STRING_VAR$ = "Hello World"
LET FLOAT_VAR = 3.14159
LET BOOLEAN_VAR = 1  ' 1 = true, 0 = false

PRINT "Integer variable:"; INTEGER_VAR
PRINT "String variable:"; STRING_VAR$
PRINT "Float variable:"; FLOAT_VAR
PRINT "Boolean variable:"; BOOLEAN_VAR

T:Variables can be modified:
U:INTEGER_VAR=*INTEGER_VAR*+8
T:Modified integer: *INTEGER_VAR*

REM Show variable scope concept (limited in this demo)
LET GLOBAL_VAR = 100
PRINT "Global variable:"; GLOBAL_VAR

INPUT DUMMY$
J:CONCEPTS_MENU

L:CONTROL_DEMO
T:=== Control Structures ===
T:Control structures determine the flow of program execution.
T:

T:1. Conditional Statements (IF-THEN):
LET TEST_SCORE = 85
IF TEST_SCORE >= 90 THEN PRINT "Grade: A"
IF TEST_SCORE >= 80 AND TEST_SCORE < 90 THEN PRINT "Grade: B"
IF TEST_SCORE >= 70 AND TEST_SCORE < 80 THEN PRINT "Grade: C"
IF TEST_SCORE < 70 THEN PRINT "Grade: F"

T:2. Loops (FOR-NEXT):
PRINT "Counting with FOR loop:"
FOR I = 1 TO 5
  PRINT "Count:"; I
NEXT I

T:3. While-style loops (simulated):
LET COUNTER = 1
L:WHILE_LOOP
IF COUNTER > 3 THEN J:END_WHILE
PRINT "While loop iteration:"; COUNTER
U:COUNTER=*COUNTER*+1
J:WHILE_LOOP
L:END_WHILE

INPUT DUMMY$
J:CONCEPTS_MENU

L:FUNCTIONS_DEMO
T:=== Functions and Procedures ===
T:Functions perform specific tasks and can return values.
T:Procedures are similar but don't return values.
T:

PRINT "Demonstrating mathematical functions:"
LET NUM = 16
LET SQUARE_ROOT = SQR(NUM)  ' Note: SQR is not implemented, showing concept
PRINT "Number:"; NUM
PRINT "Square:"; NUM * NUM
PRINT "Cube:"; NUM * NUM * NUM

T:Custom procedures in Logo:
CLEARSCREEN
PRINT "Drawing shapes with procedures..."

REM Draw multiple shapes using procedures
FOR SHAPE = 1 TO 3
  IF SHAPE = 1 THEN GOSUB 2000  ' Draw triangle
  IF SHAPE = 2 THEN GOSUB 2100  ' Draw square
  IF SHAPE = 3 THEN GOSUB 2200  ' Draw pentagon
NEXT SHAPE

HOME
INPUT DUMMY$
J:CONCEPTS_MENU

L:ARRAYS_DEMO
T:=== Arrays and Data Structures ===
T:Arrays store multiple values of the same type.
T:

REM Demonstrate array usage
DIM STUDENT_NAMES$(5)
DIM STUDENT_SCORES(5)

REM Initialize arrays
STUDENT_NAMES$(1) = "Alice"
STUDENT_NAMES$(2) = "Bob"
STUDENT_NAMES$(3) = "Charlie"
STUDENT_NAMES$(4) = "Diana"
STUDENT_NAMES$(5) = "Eve"

STUDENT_SCORES(1) = 95
STUDENT_SCORES(2) = 87
STUDENT_SCORES(3) = 92
STUDENT_SCORES(4) = 88
STUDENT_SCORES(5) = 96

PRINT "Student Report Card:"
PRINT "Name          Score"
PRINT "------------  -----"
FOR I = 1 TO 5
  PRINT STUDENT_NAMES$(I); "     "; STUDENT_SCORES(I)
NEXT I

REM Calculate average
LET TOTAL = 0
FOR I = 1 TO 5
  LET TOTAL = TOTAL + STUDENT_SCORES(I)
NEXT I
LET AVERAGE = TOTAL / 5
PRINT "Class Average:"; AVERAGE

INPUT DUMMY$
J:CONCEPTS_MENU

L:IO_DEMO
T:=== Input/Output Operations ===
T:I/O operations allow programs to interact with users and external data.
T:

PRINT "=== Input Operations ==="
PRINT "Different ways to get user input:"

PRINT "1. Simple input:"
INPUT "Enter your name: "; USER_NAME$
PRINT "Hello,"; USER_NAME$; "!"

PRINT "2. Numeric input:"
INPUT "Enter your age: "; USER_AGE
PRINT "You are"; USER_AGE; "years old."

PRINT "3. Yes/No input:"
INPUT "Do you like programming? (Y/N): "; LIKES_PROGRAMMING$
IF LIKES_PROGRAMMING$ = "Y" THEN PRINT "Great! Keep learning!"
IF LIKES_PROGRAMMING$ = "N" THEN PRINT "That's okay, give it time!"

PRINT "=== Output Operations ==="
PRINT "Different ways to display information:"

REM Formatted output
LET PRICE = 29.99
LET TAX = PRICE * 0.08
LET TOTAL = PRICE + TAX

PRINT "Item Price: $"; PRICE
PRINT "Tax (8%):   $"; TAX
PRINT "Total:      $"; TOTAL

REM Progress indicators
PRINT "Processing data..."
FOR I = 1 TO 10
  PRINT "â–ˆ";
  REM In a real program, you'd do actual processing here
NEXT I
PRINT " Complete!"

INPUT DUMMY$
J:CONCEPTS_MENU

L:ERROR_DEMO
T:=== Error Handling ===
T:Programs should handle errors gracefully to provide good user experience.
T:

PRINT "Demonstrating error handling concepts:"

PRINT "1. Division by zero protection:"
INPUT "Enter a number to divide by 10: "; DIVISOR
IF DIVISOR = 0 THEN PRINT "Error: Cannot divide by zero!" ELSE PRINT "Result:"; 10 / DIVISOR

PRINT "2. Input validation:"
L:VALIDATION_LOOP
INPUT "Enter a number between 1-10: "; VALID_NUM
IF VALID_NUM < 1 OR VALID_NUM > 10 THEN PRINT "Please enter a number between 1-10" ELSE J:VALIDATION_END
J:VALIDATION_LOOP
L:VALIDATION_END
PRINT "Valid input received:"; VALID_NUM

PRINT "3. File operation error handling:"
PRINT "(Note: File operations would be demonstrated in full IDE)"
PRINT "Concept: Check if file exists before reading"
PRINT "Concept: Handle permission errors"
PRINT "Concept: Provide meaningful error messages"

PRINT "4. Recovery strategies:"
PRINT "- Validate input before processing"
PRINT "- Provide default values for missing data"
PRINT "- Log errors for debugging"
PRINT "- Give users clear feedback on what went wrong"

INPUT DUMMY$
J:CONCEPTS_MENU

L:EXIT_EDU
T:ðŸŽ“ Educational Demo Complete! ðŸŽ“
T:You explored fundamental programming concepts:
T:â€¢ Variables and data types
T:â€¢ Control structures
T:â€¢ Functions and procedures
T:â€¢ Arrays and data structures
T:â€¢ Input/Output operations
T:â€¢ Error handling
T:
T:Keep learning and experimenting!
END

REM Shape drawing subroutines
2000 REM Draw triangle
PENUP
SETXY -100 0
PENDOWN
FOR I = 1 TO 3
  FORWARD 50
  RIGHT 120
NEXT I
PENUP
SETXY 0 0
PENDOWN
RETURN

2100 REM Draw square
PENUP
SETXY -25 -25
PENDOWN
FOR I = 1 TO 4
  FORWARD 50
  RIGHT 90
NEXT I
PENUP
SETXY 75 0
PENDOWN
RETURN

2200 REM Draw pentagon
PENUP
SETXY 25 0
PENDOWN
FOR I = 1 TO 5
  FORWARD 40
  RIGHT 72
NEXT I
PENUP
HOME
PENDOWN
RETURN